# Generated by Django 4.1.8 on 2023-06-21 10:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Alert",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("evaluation_duration", models.FloatField()),
                (
                    "evaluation_duration_unit",
                    models.CharField(
                        choices=[
                            ("year", "year"),
                            ("day", "day"),
                            ("hour", "hour"),
                            ("minute", "minute"),
                            ("second", "second"),
                        ],
                        max_length=10,
                    ),
                ),
                ("evaluation_processing", models.CharField(max_length=100)),
                ("evaluation_frequency", models.IntegerField()),
                (
                    "evaluation_frequency_unit",
                    models.CharField(
                        choices=[
                            ("year", "year"),
                            ("day", "day"),
                            ("hour", "hour"),
                            ("minute", "minute"),
                            ("second", "second"),
                        ],
                        max_length=10,
                    ),
                ),
                ("message_summary", models.CharField(max_length=100)),
                ("message_description", models.CharField(max_length=1000)),
                (
                    "message_level",
                    models.CharField(
                        choices=[
                            ("info", "info"),
                            ("warning", "warning"),
                            ("error", "error"),
                            ("critical", "critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("trigger_minimum", models.FloatField()),
                ("trigger_maximum", models.FloatField()),
                (
                    "trigger_condition",
                    models.CharField(
                        choices=[("gt", ">"), ("gte", ">="), ("lt", "<"), ("lte", "<="), ("eq", "=="), ("neq", "==")],
                        max_length=10,
                    ),
                ),
                ("trigger_condition_value", models.FloatField()),
                ("trigger_value", models.FloatField()),
                ("trigger_duration", models.FloatField()),
                (
                    "trigger_duration_unit",
                    models.CharField(
                        choices=[
                            ("year", "year"),
                            ("day", "day"),
                            ("hour", "hour"),
                            ("minute", "minute"),
                            ("second", "second"),
                        ],
                        max_length=10,
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert of parameter information",
            },
        ),
        migrations.CreateModel(
            name="Grafana",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("url", models.CharField(max_length=100)),
                ("port", models.IntegerField()),
                ("version", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Grafana information",
            },
        ),
        migrations.CreateModel(
            name="GrafanaDashboard",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("content", models.JSONField()),
                ("source", models.CharField(blank=True, max_length=100)),
                ("grafana", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.grafana")),
            ],
            options={
                "verbose_name": "Grafana dashboard information",
            },
        ),
        migrations.CreateModel(
            name="Influx",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("url", models.CharField(max_length=100)),
                ("port", models.IntegerField()),
                ("version", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Influx information",
            },
        ),
        migrations.CreateModel(
            name="InstrumentCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200)),
            ],
            options={
                "verbose_name": "Category of an instrument",
            },
        ),
        migrations.CreateModel(
            name="InstrumentModel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("model", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("manufacturer", models.CharField(max_length=1000)),
                (
                    "principal_investigator",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "verbose_name": "Model of an instrument",
            },
        ),
        migrations.CreateModel(
            name="Parameter",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("unit", models.CharField(max_length=100)),
                ("variable_in_file", models.CharField(blank=True, max_length=100)),
                ("file_type", models.CharField(blank=True, max_length=100)),
                ("comment", models.CharField(blank=True, max_length=1000)),
                (
                    "instrument_model",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.instrumentmodel"),
                ),
            ],
            options={
                "verbose_name": "Parameter information",
            },
        ),
        migrations.CreateModel(
            name="Station",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("altitude", models.FloatField()),
            ],
            options={
                "verbose_name": "Station",
            },
        ),
        migrations.CreateModel(
            name="Preprocessing",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("description", models.TextField()),
                ("reference", models.CharField(max_length=100)),
                ("required", models.BooleanField()),
                ("parameter", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.parameter")),
            ],
            options={
                "verbose_name": "Preprocessing of parameter to apply",
            },
        ),
        migrations.CreateModel(
            name="Instrument",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("pid", models.URLField()),
                ("date_start", models.DateTimeField()),
                ("date_end", models.DateTimeField()),
                ("is_active", models.BooleanField()),
                (
                    "category",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.instrumentcategory"),
                ),
                (
                    "instrument_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.instrumentmodel"),
                ),
                ("station", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.station")),
            ],
            options={
                "verbose_name": "Instrument of station",
            },
        ),
        migrations.CreateModel(
            name="InfluxSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("bucket", models.CharField(max_length=100)),
                ("tag", models.CharField(max_length=100)),
                ("measurement", models.CharField(max_length=100)),
                ("influx", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.influx")),
            ],
            options={
                "verbose_name": "Influx source information",
            },
        ),
        migrations.CreateModel(
            name="GrafanaPanel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("content", models.JSONField()),
                (
                    "dashboard",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.grafanadashboard"),
                ),
            ],
            options={
                "verbose_name": "Grafana panel information",
            },
        ),
        migrations.CreateModel(
            name="Firmware",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("version", models.CharField(max_length=100)),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[("gt", ">"), ("gte", ">="), ("lt", "<"), ("lte", "<="), ("eq", "=="), ("neq", "==")],
                        max_length=3,
                    ),
                ),
                (
                    "instrument_model",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.instrumentmodel"),
                ),
            ],
            options={
                "verbose_name": "Firmware information",
            },
        ),
        migrations.CreateModel(
            name="AlertDependency",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[("bool_and", "AND"), ("bool_or", "OR"), ("bool_not", "NOT")],
                        max_length=10,
                    ),
                ),
                (
                    "alert_left",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, related_name="alert_left", to="hkd.alert"
                    ),
                ),
                (
                    "alert_right",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, related_name="alert_right", to="hkd.alert"
                    ),
                ),
            ],
            options={
                "verbose_name": "Dependency between alerts",
            },
        ),
        migrations.CreateModel(
            name="AlertContact",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("email", models.CharField(max_length=200)),
            ],
            options={
                "verbose_name": "Contact for alerting",
                "unique_together": {("name", "email")},
            },
        ),
        migrations.AddField(
            model_name="alert",
            name="contact",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.alertcontact"),
        ),
        migrations.AddField(
            model_name="alert",
            name="parameter",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="hkd.parameter"),
        ),
    ]
